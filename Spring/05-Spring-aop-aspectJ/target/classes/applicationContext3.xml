<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    <bean id="someService" class="com.lcx.bao3.SomeServiceImpl"/>
    <!--    声明切面类对象-->
    <bean id="myAspect" class="com.lcx.bao3.MyAspect"/>
    <!--
        声明自动代理生成器：使用aspect 框架内部的功能，创建目标对象的代理对象
        创建代理对象是在内存中实现的，修改目标对象的内存中的结构，创建为代理对象
        所以目标对象就是被修改后的代理对象

        aspectj-autoproxy 会自动将spring中的目标对象生成代理对象
    -->
    <aop:aspectj-autoproxy/>

<!--
        @AfterThrow 类比 catch
        @After 类比finally
        @Pointcut 当用多个 切入表达式时，可以用 @Pointcut 来定义和管理切入点
            属性：value 切入点表达式
            位置：在自定义的方法上面
            特点：当使用 @Pointcut 定义在一个方法上面，此时这个方法的别名就切入点表达式的别名
            当其他的通知中，value 就可以使用这个方法别名，代替切入点表达式
-->
</beans>