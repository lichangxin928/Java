<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    声明。注册 springmvc 的核心对象DispatcherServlet
        需要在服务器启动后，创建DispatcherServlet对象的实例
        为什么：
            因为 DispatcherServlet 在他创建的过程中，会同时创建 springmvc 容器对象
            读取springmvc的配置文件，吧这个配置文件的对象都创建好，当用户发起请求时就可以直接
            使用对象了

        Servlet 初始化会执行 init() 方法。DispatcherServlet 在inti() 中
        创建容器，读取配置文件，把容器对象放入到 ServletContext
        webApplicationContext ctx = ClassPathXmlApplication("Spring.xml");

        // 把容器放入 ServletContext 中
        getServletContext().setAttribute(key,ctx);
-->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

<!--        自定义在mvc 中读取文件的规则-->
        <init-param>
<!--            自定义springmvc 的配置文件的属性-->
            <param-name>contextConfigLocation</param-name>
<!--            指定自定义文件的路径-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        在 tomcat 启动后创建 Servlet 对象-->
<!--        表示tomcat启动后创建对象的顺序，他的值是整数，数值越小创建对象的时间越早-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
<!--
    使用框架的时候，url-pattern可以使用两种值
    1. 使用扩展名方式，语法：*.xxx,xxxx是自定义的扩展名。常用方式 *.do,*.action *.mvc等
        http://localhost:8080/myweb/some.do 。。。
    2. 使用斜杠
-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>